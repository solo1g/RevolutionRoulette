{
  "address": "0x9aE11E79cb5C7ed9E9717D85E501301186ca2D94",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Challenge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "actionBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "otherHit",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "wasLive",
          "type": "bool"
        }
      ],
      "name": "GameLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "with",
          "type": "address"
        }
      ],
      "name": "RecentGame",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "itemsToUse",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "target",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "randNum",
          "type": "uint256"
        }
      ],
      "name": "actionsCommit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player2",
          "type": "address"
        }
      ],
      "name": "actionsReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player2",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "turn",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "liveRounds",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "blankRounds",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "randNum",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "itemsToUse",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "target",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            }
          ],
          "internalType": "struct RevolutionRoulette.RngCommit",
          "name": "commitedRandHash",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "health",
              "type": "uint8"
            },
            {
              "internalType": "uint8[4]",
              "name": "items",
              "type": "uint8[4]"
            },
            {
              "internalType": "uint8",
              "name": "effects",
              "type": "uint8"
            }
          ],
          "internalType": "struct RevolutionRoulette.Player",
          "name": "player1",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "health",
              "type": "uint8"
            },
            {
              "internalType": "uint8[4]",
              "name": "items",
              "type": "uint8[4]"
            },
            {
              "internalType": "uint8",
              "name": "effects",
              "type": "uint8"
            }
          ],
          "internalType": "struct RevolutionRoulette.Player",
          "name": "player2",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "player2",
          "type": "address"
        }
      ],
      "name": "getGameId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "randNum",
          "type": "uint256"
        }
      ],
      "name": "newGameCommit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player2",
          "type": "address"
        }
      ],
      "name": "newGameReveal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stats",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "wins",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "losses",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "moneyWon",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "moneyLost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb24ac8be6f14d5f593c62635dbf14932e7f438a77555dd2d60476b7e21a577c0",
  "receipt": {
    "to": null,
    "from": "0xfbCE2693FBEd73E3D464d662235DC5ADC5454C01",
    "contractAddress": "0x9aE11E79cb5C7ed9E9717D85E501301186ca2D94",
    "transactionIndex": 4,
    "gasUsed": "1959574",
    "logsBloom": "0x
    "blockHash": "0xc78650c4ad9ca5bfd77d651ef8150ffdb7d381e9af19be991fd6a970d50a60d2",
    "transactionHash": "0xb24ac8be6f14d5f593c62635dbf14932e7f438a77555dd2d60476b7e21a577c0",
    "logs": [],
    "blockNumber": 115129555,
    "cumulativeGasUsed": "2444197",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5a76c7d5b844875d608025a2ef6e4c57",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Challenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actionBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"otherHit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"wasLive\",\"type\":\"bool\"}],\"name\":\"GameLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"with\",\"type\":\"address\"}],\"name\":\"RecentGame\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"itemsToUse\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"target\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"randNum\",\"type\":\"uint256\"}],\"name\":\"actionsCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"actionsReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"turn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liveRounds\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"blankRounds\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"randNum\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"itemsToUse\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"target\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"internalType\":\"struct RevolutionRoulette.RngCommit\",\"name\":\"commitedRandHash\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"health\",\"type\":\"uint8\"},{\"internalType\":\"uint8[4]\",\"name\":\"items\",\"type\":\"uint8[4]\"},{\"internalType\":\"uint8\",\"name\":\"effects\",\"type\":\"uint8\"}],\"internalType\":\"struct RevolutionRoulette.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"health\",\"type\":\"uint8\"},{\"internalType\":\"uint8[4]\",\"name\":\"items\",\"type\":\"uint8[4]\"},{\"internalType\":\"uint8\",\"name\":\"effects\",\"type\":\"uint8\"}],\"internalType\":\"struct RevolutionRoulette.Player\",\"name\":\"player2\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"getGameId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"randNum\",\"type\":\"uint256\"}],\"name\":\"newGameCommit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"newGameReveal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stats\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"wins\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"losses\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"moneyWon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moneyLost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RevolutionRoulette.sol\":\"RevolutionRoulette\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/RevolutionRoulette.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n// ITEMS:\\n// 0 => blank\\n// 1 => painkillers (+1 hp)\\n// 2 => alcohol bottle (3x damage, 60% hit chance)\\n// 3 => opponent miss (50% hit chance)\\n// 4 => quickfire (2x damage, 90% hit chance)\\n// 5 => +2 live rounds\\n// 6 => +2 blank rounds\\n// 7 => cuffs (opponent skips next turn)\\n// 8 => thief's hand (steal first item from opponent)\\n// 9 => bulletproof vest (prevents being one shot)\\n// 10 => lock => disable opponent items for next turn\\n// 11 => weird fruit => double hp but can no longer use items\\n// 12 => magician's hand => swap live and blank rounds\\n// 13 => wynn cap => end the game immediately deciding a random winner\\n// 14 => system glitch => delete all items from both players\\n// 15 => system hack => delete all items from opponent\\n\\n// EFFECTS:\\n// 0 => 50% hit chance\\n// 1 => one shot protection\\n// 2 => lock items\\n// 3 => can't use items ever\\n\\ncontract RevolutionRoulette {\\n\\tuint8 constant INVENTORY_SIZE = 4;\\n\\tuint8 constant ITEM_COUNT = 15;\\n\\n\\tevent GameLog(\\n\\t\\tuint256 indexed gameId,\\n\\t\\taddress actionBy,\\n\\t\\tbool otherHit,\\n\\t\\tbool wasLive\\n\\t);\\n\\tevent Challenge(address indexed to, address from, uint256 amount);\\n\\tevent RecentGame(address indexed player, address with);\\n\\n\\tstruct Stats {\\n\\t\\tuint32 wins;\\n\\t\\tuint32 losses;\\n\\t\\tuint256 moneyWon;\\n\\t\\tuint256 moneyLost;\\n\\t}\\n\\n\\tmapping(address => Stats) public stats;\\n\\n\\tstruct RngCommit {\\n\\t\\tuint256 randNum;\\n\\t\\tuint16 itemsToUse;\\n\\t\\tuint8 target;\\n\\t\\tuint256 block;\\n\\t}\\n\\n\\tstruct Player {\\n\\t\\tuint8 health;\\n\\t\\tuint8[INVENTORY_SIZE] items;\\n\\t\\tuint8 effects;\\n\\t}\\n\\n\\tstruct GameState {\\n\\t\\t// to not store the addresses we simply define turn = even parity => smaller address runs first\\n\\t\\t// else larger address's turn\\n\\t\\t// player 1 is always the smaller address player\\n\\t\\tuint8 turn;\\n\\t\\tuint8 liveRounds;\\n\\t\\tuint8 blankRounds;\\n\\t\\tuint8 status;\\n\\t\\tuint256 betAmount;\\n\\t\\tRngCommit commitedRandHash;\\n\\t\\tPlayer player1;\\n\\t\\tPlayer player2;\\n\\t}\\n\\n\\tmapping(bytes32 => GameState) public games;\\n\\n\\tfunction getGameId(\\n\\t\\taddress player1,\\n\\t\\taddress player2\\n\\t) public pure returns (bytes32) {\\n\\t\\tif (player1 > player2) (player1, player2) = (player2, player1);\\n\\t\\treturn keccak256(abi.encodePacked(player1, player2));\\n\\t}\\n\\n\\tfunction getGame(\\n\\t\\taddress player1,\\n\\t\\taddress player2\\n\\t) private view returns (GameState storage) {\\n\\t\\tbytes32 key = getGameId(player1, player2);\\n\\t\\tGameState storage game = games[key];\\n\\t\\treturn game;\\n\\t}\\n\\n\\tmodifier validTurn(address player2, uint8 reqStatus) {\\n\\t\\tGameState storage game = getGame(msg.sender, player2);\\n\\t\\trequire(game.status == reqStatus, \\\"Invalid action\\\");\\n\\n\\t\\tif (game.turn == 0) {\\n\\t\\t\\t// the smaller address runs\\n\\t\\t\\trequire(msg.sender < player2, \\\"Not your turn\\\");\\n\\t\\t} else {\\n\\t\\t\\trequire(msg.sender > player2, \\\"Not your turn\\\");\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction claimRewards(address player2) public validTurn(player2, 3) {\\n\\t\\tbytes32 key = getGameId(msg.sender, player2);\\n\\t\\tGameState storage game = games[key];\\n\\n\\t\\tstats[msg.sender].wins += 1;\\n\\t\\tstats[player2].losses += 1;\\n\\t\\tstats[msg.sender].moneyWon += game.betAmount;\\n\\t\\tstats[player2].moneyLost += game.betAmount;\\n\\n\\t\\t// payout\\n\\t\\t(bool success, ) = msg.sender.call{ value: game.betAmount }(\\\"\\\");\\n\\t\\trequire(success, \\\"Transfer failed.\\\");\\n\\n\\t\\tgame.status = 4;\\n\\t}\\n\\n\\tfunction actionsCommit(\\n\\t\\taddress player2,\\n\\t\\tuint16 itemsToUse,\\n\\t\\tuint8 target,\\n\\t\\tuint256 randNum\\n\\t) public validTurn(player2, 2) {\\n\\t\\tGameState storage game = getGame(msg.sender, player2);\\n\\n\\t\\t// check if the player has the item in his iventory\\n\\t\\tPlayer storage currentPlayer = game.turn == 0\\n\\t\\t\\t? game.player1\\n\\t\\t\\t: game.player2;\\n\\n\\t\\tfor (uint8 i = 1; i <= ITEM_COUNT; i++) {\\n\\t\\t\\tif ((itemsToUse >> i) & 1 == 1) {\\n\\t\\t\\t\\tbool found = false;\\n\\t\\t\\t\\tfor (uint8 j = 0; j < INVENTORY_SIZE; j++) {\\n\\t\\t\\t\\t\\tif (currentPlayer.items[j] == i) {\\n\\t\\t\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\t\\t\\tcurrentPlayer.items[j] = 0;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\trequire(found, \\\"Invalid items\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// check if items are locked but used by player\\n\\t\\tif ((currentPlayer.effects >> 2) & 1 == 1) {\\n\\t\\t\\trequire(itemsToUse == 0, \\\"Items locked in this turn\\\");\\n\\t\\t}\\n\\t\\tif ((currentPlayer.effects >> 3) & 1 == 1) {\\n\\t\\t\\trequire(itemsToUse == 0, \\\"Items locked in this turn\\\");\\n\\t\\t}\\n\\t\\t// commit the items\\n\\t\\tgame.commitedRandHash.itemsToUse = itemsToUse;\\n\\t\\tgame.commitedRandHash.block = block.number;\\n\\t\\tgame.commitedRandHash.randNum = randNum;\\n\\t\\tgame.commitedRandHash.target = target;\\n\\t}\\n\\n\\tfunction actionsReveal(address player2) public validTurn(player2, 2) {\\n\\t\\tbytes32 key = getGameId(msg.sender, player2);\\n\\t\\tGameState storage game = games[key];\\n\\t\\trequire(game.commitedRandHash.block < block.number, \\\"Block not mined\\\");\\n\\t\\trequire(\\n\\t\\t\\tblock.number < game.commitedRandHash.block + 250,\\n\\t\\t\\t\\\"Block too old\\\"\\n\\t\\t);\\n\\n\\t\\t// player 1 is always the smaller address player\\n\\t\\tPlayer storage currentPlayer = game.turn == 0\\n\\t\\t\\t? game.player1\\n\\t\\t\\t: game.player2;\\n\\t\\tPlayer storage otherPlayer = game.turn == 0\\n\\t\\t\\t? game.player2\\n\\t\\t\\t: game.player1;\\n\\n\\t\\tuint8 damage = 1;\\n\\t\\tuint32 hitChance = 100;\\n\\n\\t\\t// applying effects\\n\\n\\t\\t// bit 0\\n\\t\\tif (currentPlayer.effects & 1 == 1) {\\n\\t\\t\\t// smoke bomb 50% hit chance effect\\n\\t\\t\\thitChance = 50;\\n\\t\\t\\tcurrentPlayer.effects ^= 1;\\n\\t\\t}\\n\\t\\t// bit 1 (one shot protection) check later\\n\\t\\t// bit 2 (lock items)\\n\\t\\tif ((currentPlayer.effects >> 2) & 1 == 1) {\\n\\t\\t\\t// items checked in commit already\\n\\t\\t\\tcurrentPlayer.effects ^= 4;\\n\\t\\t}\\n\\t\\t// bit 3 (can't use items ever), no need to undo\\n\\n\\t\\t// get a random number\\n\\t\\tuint256 random = uint256(\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\tgame.commitedRandHash.randNum,\\n\\t\\t\\t\\t\\tblockhash(game.commitedRandHash.block)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tuint256 slice;\\n\\n\\t\\tif ((game.commitedRandHash.itemsToUse >> 1) & 1 == 1) {\\n\\t\\t\\t// painkillers\\n\\t\\t\\tcurrentPlayer.health += 1;\\n\\t\\t}\\n\\t\\tif ((game.commitedRandHash.itemsToUse >> 2) & 1 == 1) {\\n\\t\\t\\t// alcohol bottle\\n\\t\\t\\tdamage = 3;\\n\\t\\t\\tif (hitChance == 100) hitChance = 60;\\n\\t\\t}\\n\\t\\tif ((game.commitedRandHash.itemsToUse >> 3) & 1 == 1) {\\n\\t\\t\\t// opponent hit chance = 50\\n\\t\\t\\totherPlayer.effects |= 1;\\n\\t\\t}\\n\\t\\tif ((game.commitedRandHash.itemsToUse >> 4) & 1 == 1) {\\n\\t\\t\\t// quickfire\\n\\t\\t\\tdamage = 2;\\n\\t\\t\\tif (hitChance == 100) hitChance = 90;\\n\\t\\t}\\n\\t\\tif ((game.commitedRandHash.itemsToUse >> 5) & 1 == 1) {\\n\\t\\t\\t// +2 live rounds\\n\\t\\t\\tgame.liveRounds += 2;\\n\\t\\t}\\n\\t\\tif ((game.commitedRandHash.itemsToUse >> 6) & 1 == 1) {\\n\\t\\t\\t// +2 blank rounds\\n\\t\\t\\tgame.blankRounds += 2;\\n\\t\\t}\\n\\t\\t// 7 is cuffs check later\\n\\t\\tif ((game.commitedRandHash.itemsToUse >> 8) & 1 == 1) {\\n\\t\\t\\t// thief's hand\\n\\t\\t\\t// steal first item from opponent\\n\\t\\t\\tuint8 itemToSteal;\\n\\t\\t\\tfor (uint8 i = 0; i < INVENTORY_SIZE; i++) {\\n\\t\\t\\t\\tif (otherPlayer.items[i] != 0) {\\n\\t\\t\\t\\t\\titemToSteal = otherPlayer.items[i];\\n\\t\\t\\t\\t\\totherPlayer.items[i] = 0;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfor (uint8 i = 0; i < INVENTORY_SIZE; i++) {\\n\\t\\t\\t\\tif (currentPlayer.items[i] == 0) {\\n\\t\\t\\t\\t\\tcurrentPlayer.items[i] = itemToSteal;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif ((game.commitedRandHash.itemsToUse >> 9) & 1 == 1) {\\n\\t\\t\\t// bulletproof vest\\n\\t\\t\\tcurrentPlayer.effects |= 2;\\n\\t\\t}\\n\\t\\tif ((game.commitedRandHash.itemsToUse >> 10) & 1 == 1) {\\n\\t\\t\\t// lock\\n\\t\\t\\totherPlayer.effects |= 4;\\n\\t\\t}\\n\\t\\tif ((game.commitedRandHash.itemsToUse >> 11) & 1 == 1) {\\n\\t\\t\\t// vitality apple\\n\\t\\t\\tcurrentPlayer.effects |= 8;\\n\\t\\t\\tcurrentPlayer.health *= 2;\\n\\t\\t}\\n\\t\\tif ((game.commitedRandHash.itemsToUse >> 12) & 1 == 1) {\\n\\t\\t\\t// magician's hand\\n\\t\\t\\tuint8 temp = game.liveRounds;\\n\\t\\t\\tgame.liveRounds = game.blankRounds;\\n\\t\\t\\tgame.blankRounds = temp;\\n\\t\\t}\\n\\t\\tif ((game.commitedRandHash.itemsToUse >> 13) & 1 == 1) {\\n\\t\\t\\t// wynn cap\\n\\t\\t\\tgame.status = 3;\\n\\t\\t\\t// decide a random winner\\n\\t\\t\\t// 1 bit of randomness\\n\\n\\t\\t\\t(random, slice) = _getBitSlice(random, 1);\\n\\t\\t\\tif (slice == 1) {\\n\\t\\t\\t\\t// current player wins\\n\\t\\t\\t\\tcurrentPlayer.health = 1;\\n\\t\\t\\t\\totherPlayer.health = 0;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// other player wins\\n\\t\\t\\t\\tcurrentPlayer.health = 0;\\n\\t\\t\\t\\totherPlayer.health = 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\tgame.turn = game.player1.health == 0 ? 1 : 0;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif ((game.commitedRandHash.itemsToUse >> 14) & 1 == 1) {\\n\\t\\t\\t// system glitch\\n\\t\\t\\tfor (uint8 i = 0; i < INVENTORY_SIZE; i++) {\\n\\t\\t\\t\\tcurrentPlayer.items[i] = 0;\\n\\t\\t\\t\\totherPlayer.items[i] = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif ((game.commitedRandHash.itemsToUse >> 15) & 1 == 1) {\\n\\t\\t\\t// system hack\\n\\t\\t\\tfor (uint8 i = 0; i < INVENTORY_SIZE; i++) {\\n\\t\\t\\t\\totherPlayer.items[i] = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// decide if the shot hits target\\n\\t\\t// 8 bit of randomness\\n\\t\\t(random, slice) = _getBitSlice(random, 8);\\n\\t\\tuint8 success = ((slice % 100) < hitChance) ? 1 : 0;\\n\\n\\t\\t(random, slice) = _getBitSlice(random, 8);\\n\\t\\tuint totalBullets = game.liveRounds + game.blankRounds;\\n\\t\\tbool isLive = (slice % totalBullets) < game.liveRounds;\\n\\t\\tbool otherHit = (game.commitedRandHash.target ^ success) == 0;\\n\\t\\t// target hit success if slice < hitChance\\n\\t\\t// target 1 means other player\\n\\n\\t\\t// hit other player\\n\\t\\tif (isLive) {\\n\\t\\t\\tif (otherHit) {\\n\\t\\t\\t\\tif (otherPlayer.health >= damage) {\\n\\t\\t\\t\\t\\totherPlayer.health -= damage;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// if one shot protection\\n\\t\\t\\t\\t\\tif ((otherPlayer.effects >> 1) & 1 == 1) {\\n\\t\\t\\t\\t\\t\\totherPlayer.health = 1;\\n\\t\\t\\t\\t\\t\\totherPlayer.effects ^= 2;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\totherPlayer.health = 0;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (otherPlayer.health == 0) {\\n\\t\\t\\t\\t\\t// game over\\n\\t\\t\\t\\t\\tgame.status = 3;\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// self hit\\n\\t\\t\\t\\tif (currentPlayer.health >= damage) {\\n\\t\\t\\t\\t\\tcurrentPlayer.health -= damage;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// if one shot protection\\n\\t\\t\\t\\t\\tif ((currentPlayer.effects >> 1) & 1 == 1) {\\n\\t\\t\\t\\t\\t\\tcurrentPlayer.health = 1;\\n\\t\\t\\t\\t\\t\\tcurrentPlayer.effects ^= 2;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tcurrentPlayer.health = 0;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (currentPlayer.health == 0) {\\n\\t\\t\\t\\t\\t// game over\\n\\t\\t\\t\\t\\tgame.status = 3;\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tgame.liveRounds -= 1;\\n\\t\\t} else {\\n\\t\\t\\t// blank round\\n\\t\\t\\tgame.blankRounds -= 1;\\n\\t\\t}\\n\\n\\t\\t// update the turn\\n\\t\\t// if cuffs\\n\\t\\tif (\\n\\t\\t\\t// shot a blank at self\\n\\t\\t\\t(!isLive && game.commitedRandHash.target == 0) ||\\n\\t\\t\\t// or used cuffs\\n\\t\\t\\t(game.commitedRandHash.itemsToUse >> 7) & 1 == 1\\n\\t\\t) {\\n\\t\\t\\t// same guy's turn\\n\\t\\t} else {\\n\\t\\t\\tgame.turn ^= 1;\\n\\t\\t}\\n\\n\\t\\tgame.commitedRandHash.block = 0;\\n\\n\\t\\t// post reveal fixups\\n\\t\\tif (game.liveRounds + game.blankRounds == 0) {\\n\\t\\t\\t// add fresh set of rounds\\n\\t\\t\\t(random, slice) = _getBitSlice(random, 3);\\n\\t\\t\\tgame.liveRounds = uint8((slice % 4) + 1);\\n\\n\\t\\t\\t// take 3 bits or randomness for blank rounds\\n\\t\\t\\t(random, slice) = _getBitSlice(random, 3);\\n\\t\\t\\tgame.blankRounds = uint8((slice % 4) + 1);\\n\\t\\t}\\n\\n\\t\\t// 25% chance to get 2 items\\n\\t\\t(random, slice) = _getBitSlice(random, 2);\\n\\t\\tif (slice == 0) {\\n\\t\\t\\t// giving 2 items to each player initially\\n\\t\\t\\tfor (uint8 i = 0; i < 2; i++) {\\n\\t\\t\\t\\t(random, slice) = _getBitSlice(random, 8);\\n\\t\\t\\t\\tcurrentPlayer.items[i] = uint8((slice % ITEM_COUNT) + 1);\\n\\t\\t\\t}\\n\\t\\t\\tfor (uint8 i = 0; i < 2; i++) {\\n\\t\\t\\t\\t(random, slice) = _getBitSlice(random, 8);\\n\\t\\t\\t\\totherPlayer.items[i] = uint8((slice % ITEM_COUNT) + 1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\temit GameLog(uint256(key), msg.sender, otherHit, isLive);\\n\\t}\\n\\n\\tfunction newGameCommit(address player2, uint256 randNum) public payable {\\n\\t\\tbytes32 gameId = getGameId(msg.sender, player2);\\n\\t\\tGameState storage game = games[gameId];\\n\\n\\t\\trequire(\\n\\t\\t\\tgame.status == 0 ||\\n\\t\\t\\t\\tgame.status == 4 ||\\n\\t\\t\\t\\t(game.status == 1 &&\\n\\t\\t\\t\\t\\tblock.number > game.commitedRandHash.block + 260),\\n\\t\\t\\t\\\"Game already exists\\\"\\n\\t\\t);\\n\\n\\t\\t// set turn to the other guy\\n\\t\\t// even parity => smaller address's turn\\n\\t\\tgame.turn = msg.sender < player2 ? 1 : 0;\\n\\t\\tgame.commitedRandHash = RngCommit(randNum, 0, 0, block.number);\\n\\t\\tgame.betAmount = msg.value;\\n\\t\\tgame.status = 1;\\n\\n\\t\\temit Challenge(player2, msg.sender, msg.value);\\n\\t\\temit RecentGame(msg.sender, player2);\\n\\t\\temit RecentGame(player2, msg.sender);\\n\\t}\\n\\n\\tfunction newGameReveal(\\n\\t\\taddress player2\\n\\t) public payable validTurn(player2, 1) {\\n\\t\\tbytes32 gameId = getGameId(msg.sender, player2);\\n\\t\\tGameState storage game = games[gameId];\\n\\t\\trequire(game.commitedRandHash.block < block.number, \\\"Block not mined\\\");\\n\\t\\trequire(\\n\\t\\t\\tblock.number < game.commitedRandHash.block + 250,\\n\\t\\t\\t\\\"Block too old\\\"\\n\\t\\t);\\n\\t\\trequire(msg.value == game.betAmount, \\\"Invalid bet amount\\\");\\n\\t\\tgame.betAmount += msg.value;\\n\\n\\t\\tuint256 random = uint256(\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\tgame.commitedRandHash.randNum,\\n\\t\\t\\t\\t\\tblockhash(game.commitedRandHash.block)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\t// we now have 256 bits of randomness now, more can be made using repeated sha3 (keccak256) of this\\n\\t\\tgame.player1.health = game.player2.health = 3;\\n\\n\\t\\t//items\\n\\t\\tuint256 slice;\\n\\t\\t// giving 2 items to each player initially\\n\\t\\tfor (uint8 i = 0; i < 2; i++) {\\n\\t\\t\\t(random, slice) = _getBitSlice(random, 8);\\n\\t\\t\\tgame.player1.items[i] = uint8((slice % ITEM_COUNT) + 1);\\n\\t\\t}\\n\\t\\tfor (uint8 i = 0; i < 2; i++) {\\n\\t\\t\\t(random, slice) = _getBitSlice(random, 8);\\n\\t\\t\\tgame.player2.items[i] = uint8((slice % ITEM_COUNT) + 1);\\n\\t\\t}\\n\\n\\t\\t// 1 bit or randomness for turn\\n\\t\\t(random, slice) = _getBitSlice(random, 1);\\n\\t\\tgame.turn = uint8(slice);\\n\\n\\t\\tconsole.log(game.turn);\\n\\t\\tconsole.log(msg.sender, player2, game.turn);\\n\\t\\tconsole.log(msg.sender < player2);\\n\\t\\t// the other player gets +1 hp\\n\\t\\tif (game.turn == 0) {\\n\\t\\t\\tgame.player2.health += 1;\\n\\t\\t} else {\\n\\t\\t\\tgame.player1.health += 1;\\n\\t\\t}\\n\\n\\t\\t// number of live and blank rounds\\n\\t\\t(random, slice) = _getBitSlice(random, 3);\\n\\t\\tgame.liveRounds = uint8((slice % 4) + 1);\\n\\n\\t\\t// take 3 bits or randomness for blank rounds\\n\\t\\t(random, slice) = _getBitSlice(random, 3);\\n\\t\\tgame.blankRounds = uint8((slice % 4) + 1);\\n\\n\\t\\tgame.commitedRandHash.block = 0;\\n\\t\\tgame.status = 2;\\n\\t}\\n\\n\\t/// @dev extract a slice of bits from a number\\n\\t/// @param num number to be sliced\\n\\t/// @param bits count of bits to be sliced, starting from the right\\n\\t/// @return the remaning number and the sliced number\\n\\tfunction _getBitSlice(\\n\\t\\tuint256 num,\\n\\t\\tuint8 bits\\n\\t) private pure returns (uint256, uint256) {\\n\\t\\tuint256 mask = (1 << bits) - 1;\\n\\t\\treturn (num >> bits, num & mask);\\n\\t}\\n}\\n\",\"keccak256\":\"0x85aabb67fe010ec9f800d28e30a927b24674118a5cef7cf8d4bc2f5fcd32c81f\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612287806100206000396000f3fe60806040526004361061007b5760003560e01c8063933698731161004e578063933698731461015e578063ef5cfb8c14610171578063f579f88214610191578063fbdd02d1146101c557600080fd5b80631a57cf231461008057806335f375e1146100955780636698a018146100c85780638bcdcbf3146100e8575b600080fd5b61009361008e366004611f8a565b6101e5565b005b3480156100a157600080fd5b506100b56100b0366004611fac565b6106cc565b6040519081526020015b60405180910390f35b3480156100d457600080fd5b506100936100e3366004611f8a565b610734565b3480156100f457600080fd5b50610136610103366004611f8a565b60006020819052908152604090208054600182015460029092015463ffffffff8083169364010000000090930416919084565b6040805163ffffffff95861681529490931660208501529183015260608201526080016100bf565b61009361016c366004611fdf565b611411565b34801561017d57600080fd5b5061009361018c366004611f8a565b611622565b34801561019d57600080fd5b506101b16101ac366004612009565b611911565b6040516100bf98979695949392919061206a565b3480156101d157600080fd5b506100936101e03660046120f0565b611a7b565b80600160006101f43384611dd1565b805490915060ff8381166301000000909204161461024a5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21030b1ba34b7b760911b60448201526064015b60405180910390fd5b805460ff166000036102a3576001600160a01b038316331061029e5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b6102eb565b6001600160a01b03831633116102eb5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b60006102f733866106cc565b6000818152600160205260409020600481015491925090431161035c5760405162461bcd60e51b815260206004820152600f60248201527f426c6f636b206e6f74206d696e656400000000000000000000000000000000006044820152606401610241565b600481015461036c9060fa612162565b43106103aa5760405162461bcd60e51b815260206004820152600d60248201526c109b1bd8dac81d1bdbc81bdb19609a1b6044820152606401610241565b806001015434146103fd5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642062657420616d6f756e7400000000000000000000000000006044820152606401610241565b348160010160008282546104119190612162565b90915550506002810154600482015460408051602080820194909452914082820152805180830382018152606090920190528051910120600882018054600360ff19918216811790925560058401805490911690911790556000805b60028160ff1610156104ea57610484836008611df4565b9093509150610494600f83612175565b61049f906001612162565b6006850160ff8316600481106104b7576104b7612197565b602091828204019190066101000a81548160ff021916908360ff16021790555080806104e2906121ad565b91505061046d565b5060005b60028160ff16101561056b57610505836008611df4565b9093509150610515600f83612175565b610520906001612162565b6009850160ff83166004811061053857610538612197565b602091828204019190066101000a81548160ff021916908360ff1602179055508080610563906121ad565b9150506104ee565b50610577826001611df4565b845460ff191660ff82169081178655919350915061059490611e1d565b82546105a69033908a9060ff16611e7e565b6105ba6001600160a01b0389163310611ef3565b825460ff166000036105fe57600883018054600191906000906105e190849060ff166121cc565b92506101000a81548160ff021916908360ff160217905550610632565b6005830180546001919060009061061990849060ff166121cc565b92506101000a81548160ff021916908360ff1602179055505b61063d826003611df4565b909250905061064d600482612175565b610658906001612162565b835460ff919091166101000261ff0019909116178355610679826003611df4565b9092509050610689600482612175565b610694906001612162565b83546000600486015563ffff000019166201000060ff929092169190910263ff00000019161763020000001790925550505050505050565b6000816001600160a01b0316836001600160a01b031611156106ec579091905b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b1660348201526048016040516020818303038152906040528051906020012090505b92915050565b80600260006107433384611dd1565b805490915060ff838116630100000090920416146107945760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21030b1ba34b7b760911b6044820152606401610241565b805460ff166000036107ed576001600160a01b03831633106107e85760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b610835565b6001600160a01b03831633116108355760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b600061084133866106cc565b600081815260016020526040902060048101549192509043116108a65760405162461bcd60e51b815260206004820152600f60248201527f426c6f636b206e6f74206d696e656400000000000000000000000000000000006044820152606401610241565b60048101546108b69060fa612162565b43106108f45760405162461bcd60e51b815260206004820152600d60248201526c109b1bd8dac81d1bdbc81bdb19609a1b6044820152606401610241565b805460009060ff161561090a578160080161090f565b816005015b825490915060009060ff1615610928578260050161092d565b826008015b60028301549091506001906064908216820361095f575060028301805460ff8082166001181660ff1990911617905560325b6002848101546001911c8116900361098a5760028401805460ff8082166004181660ff199091161790555b60028501546004860154604080516020808201949094529140828201528051808303820181526060909201905280519101206003860154600090600190811c81169003610a0257855460019087906000906109e990849060ff166121cc565b92506101000a81548160ff021916908360ff1602179055505b600387015460021c60019081169003610a2c57600393508263ffffffff16606403610a2c57603c92505b6003878101546001911c81169003610a555760028501805460ff19811660ff9091161760011790555b600387015460041c60019081169003610a7f57600293508263ffffffff16606403610a7f57605a92505b600387015460051c60019081169003610ac85786546002908890600190610aaf908490610100900460ff166121cc565b92506101000a81548160ff021916908360ff1602179055505b600387015460061c60019081169003610b1157865460029088908290610af890829062010000900460ff166121cc565b92506101000a81548160ff021916908360ff1602179055505b600387015460081c60019081169003610c80576000805b600460ff82161015610be857866001018160ff1660048110610b4c57610b4c612197565b602081049091015460ff601f9092166101000a90041615610bd657866001018160ff1660048110610b7f57610b7f612197565b602091828204019190069054906101000a900460ff1691506000876001018260ff1660048110610bb157610bb1612197565b602091828204019190066101000a81548160ff021916908360ff160217905550610be8565b80610be0816121ad565b915050610b28565b5060005b600460ff82161015610c7d57876001018160ff1660048110610c1057610c10612197565b602081049091015460ff601f9092166101000a900416600003610c6b5781886001018260ff1660048110610c4657610c46612197565b602091828204019190066101000a81548160ff021916908360ff160217905550610c7d565b80610c75816121ad565b915050610bec565b50505b600387015460091c60019081169003610cab576002868101805460ff19811660ff9091161790911790555b6003870154600a1c60019081169003610cd55760028501805460ff19811660ff9091161760041790555b6003870154600b1c60019081169003610d2c576002808701805460ff19811660ff9182161760081790915587548891600091610d13918591166121e5565b92506101000a81548160ff021916908360ff1602179055505b6003870154600c1c60019081169003610d715786546201000060ff6101008084048216830262ff000019938504909216029190911662ffff0019909216919091171787555b6003870154600d1c60019081169003610e0c57865463ff00000019166303000000178755610da0826001611df4565b90925090506001819003610dc557855460ff1990811660011787558554168555610dd8565b855460ff19908116875585541660011785555b600587015460ff1615610dec576000610def565b60015b875460ff191660ff91909116179096555061140b95505050505050565b6003870154600e1c60019081169003610eb75760005b600460ff82161015610eb5576000876001018260ff1660048110610e4857610e48612197565b602091828204019190066101000a81548160ff021916908360ff1602179055506000866001018260ff1660048110610e8257610e82612197565b602091828204019190066101000a81548160ff021916908360ff1602179055508080610ead906121ad565b915050610e22565b505b6003870154600f1c60019081169003610f285760005b600460ff82161015610f26576000866001018260ff1660048110610ef357610ef3612197565b602091828204019190066101000a81548160ff021916908360ff1602179055508080610f1e906121ad565b915050610ecd565b505b610f33826008611df4565b9092509050600063ffffffff8416610f4c606484612175565b10610f58576000610f5b565b60015b9050610f68836008611df4565b89549194509250600090610f8c9060ff6201000082048116916101009004166121cc565b895460ff918216925060009161010090910416610fa98386612175565b60038c01549111915060ff62010000909104811684181615811561117757801561108857885460ff808a1691161061100f57885488908a90600090610ff290849060ff16612208565b92506101000a81548160ff021916908360ff160217905550611054565b6002890154600190811c8116900361104b578854600160ff19918216178a556002808b01805492831660ff938416909218909216179055611054565b885460ff191689555b885460ff16600003611083575050885463ff00000019166303000000179098555061140b975050505050505050565b61113e565b895460ff808a169116106110ca57895488908b906000906110ad90849060ff16612208565b92506101000a81548160ff021916908360ff16021790555061110f565b60028a0154600190811c81169003611106578954600160ff19918216178b556002808c01805492831660ff93841690921890921617905561110f565b895460ff19168a555b895460ff1660000361113e575050885463ff00000019166303000000179098555061140b975050505050505050565b8a546001908c90829061115a908290610100900460ff16612208565b92506101000a81548160ff021916908360ff1602179055506111ae565b8a546001908c9060029061119590849062010000900460ff16612208565b92506101000a81548160ff021916908360ff1602179055505b811580156111c7575060038b015462010000900460ff16155b806111dc575060038b015460071c6001908116145b6111f5578a5460ff8082166001181660ff19909116178b555b600060048c01558a546112189060ff6201000082048116916101009004166121cc565b60ff1660000361129d5761122d866003611df4565b909650945061123d600486612175565b611248906001612162565b8b5460ff919091166101000261ff0019909116178b55611269866003611df4565b9096509450611279600486612175565b611284906001612162565b8b5460ff91909116620100000262ff000019909116178b555b6112a8866002611df4565b909650945060008590036113b95760005b60028160ff161015611336576112d0876008611df4565b90975095506112e0600f87612175565b6112eb906001612162565b8b6001018260ff166004811061130357611303612197565b602091828204019190066101000a81548160ff021916908360ff160217905550808061132e906121ad565b9150506112b9565b5060005b60028160ff1610156113b757611351876008611df4565b9097509550611361600f87612175565b61136c906001612162565b8a6001018260ff166004811061138457611384612197565b602091828204019190066101000a81548160ff021916908360ff16021790555080806113af906121ad565b91505061133a565b505b6040805133815282151560208201528315158183015290518d917fac868de1024d422dd43748aab4352d056b693c0e35c3a063246809eac59f3244919081900360600190a25050505050505050505050505b50505050565b600061141d33846106cc565b60008181526001602052604090208054919250906301000000900460ff161580611452575080546301000000900460ff166004145b80611482575080546301000000900460ff1660011480156114825750600481015461147f90610104612162565b43115b6114ce5760405162461bcd60e51b815260206004820152601360248201527f47616d6520616c726561647920657869737473000000000000000000000000006044820152606401610241565b6001600160a01b03841633106114e55760006114e8565b60015b815460408051608081018252868152600060208201819052818301524360609091018190526002850187905560038501805462ffffff191690556004850155346001850181905563ff0000ff1990921660ff9390931692909217630100000017835590516001600160a01b038616917f7287e97c456d8f252a58071175cf3af00dc7dbf999f313e51ab5f408bf6ec72b916115989133916001600160a01b03929092168252602082015260400190565b60405180910390a26040516001600160a01b038516815233907f4115b796b35d1bac2eb954bf8215a812e9d6c60b0765313323c1dc4af6aaaf449060200160405180910390a26040513381526001600160a01b038516907f4115b796b35d1bac2eb954bf8215a812e9d6c60b0765313323c1dc4af6aaaf449060200160405180910390a250505050565b80600360006116313384611dd1565b805490915060ff838116630100000090920416146116825760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21030b1ba34b7b760911b6044820152606401610241565b805460ff166000036116db576001600160a01b03831633106116d65760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b611723565b6001600160a01b03831633116117235760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b600061172f33866106cc565b6000818152600160208181526040808420338552918490528320805494955090939192909161176590849063ffffffff16612221565b92506101000a81548163ffffffff021916908363ffffffff1602179055506001600080886001600160a01b03166001600160a01b0316815260200190815260200160002060000160048282829054906101000a900463ffffffff166117ca9190612221565b92506101000a81548163ffffffff021916908363ffffffff1602179055508060010154600080336001600160a01b03166001600160a01b0316815260200190815260200160002060010160008282546118239190612162565b909155505060018101546001600160a01b03871660009081526020819052604081206002018054909190611858908490612162565b9091555050600181015460405160009133918381818185875af1925050503d80600081146118a2576040519150601f19603f3d011682016040523d82523d6000602084013e6118a7565b606091505b50509050806118f85760405162461bcd60e51b815260206004820152601060248201527f5472616e73666572206661696c65642e000000000000000000000000000000006044820152606401610241565b50805463ff000000191663040000001790555050505050565b60016020818152600092835260409283902080549281015484516080808201875260028401548252600384015461ffff811683870152620100009081900460ff908116848a01526004808701546060808701919091528a519081018b52600588018054841682528b51958601909b52828a169a6101008b0484169a94850484169963010000009095049093169794909384019160068601908282826020028201916000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116119b6575050509284525050506002919091015460ff9081166020928301526040805160608101825260088601805490931681528151608081019283905294959490938401916009860190600490826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411611a31575050509284525050506002919091015460ff16602090910152905088565b8360026000611a8a3384611dd1565b805490915060ff83811663010000009092041614611adb5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21030b1ba34b7b760911b6044820152606401610241565b805460ff16600003611b34576001600160a01b0383163310611b2f5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b611b7c565b6001600160a01b0383163311611b7c5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b6000611b883389611dd1565b805490915060009060ff1615611ba15781600801611ba6565b816005015b905060015b600f60ff821611611cc857600161ffff8a1660ff83161c81169003611cb6576000805b600460ff82161015611c66578260ff16846001018260ff1660048110611bf657611bf6612197565b602081049091015460ff601f9092166101000a90041603611c5457600191506000846001018260ff1660048110611c2f57611c2f612197565b602091828204019190066101000a81548160ff021916908360ff160217905550611c66565b80611c5e816121ad565b915050611bce565b5080611cb45760405162461bcd60e51b815260206004820152600d60248201527f496e76616c6964206974656d73000000000000000000000000000000000000006044820152606401610241565b505b80611cc0816121ad565b915050611bab565b506002818101546001911c81169003611d2d5761ffff881615611d2d5760405162461bcd60e51b815260206004820152601960248201527f4974656d73206c6f636b656420696e2074686973207475726e000000000000006044820152606401610241565b600281015460031c60019081169003611d925761ffff881615611d925760405162461bcd60e51b815260206004820152601960248201527f4974656d73206c6f636b656420696e2074686973207475726e000000000000006044820152606401610241565b5060038101805443600484015560029092019590955560ff909516620100000262ffffff1990951661ffff909616959095179390931790915550505050565b600080611dde84846106cc565b6000908152600160205260409020949350505050565b60008080611e09600160ff861681901b61223e565b60ff9490941685901c959390941693505050565b611e7b81604051602401611e3391815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167ff82c50f100000000000000000000000000000000000000000000000000000000179052611f49565b50565b6040516001600160a01b0380851660248301528316604482015260648101829052611eee9060840160408051601f198184030181529190526020810180516001600160e01b03167f17fe618500000000000000000000000000000000000000000000000000000000179052611f49565b505050565b6040518115156024820152611e7b9060440160408051601f198184030181529190526020810180516001600160e01b03167f32458eed000000000000000000000000000000000000000000000000000000001790525b611e7b8160006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b80356001600160a01b0381168114611f8557600080fd5b919050565b600060208284031215611f9c57600080fd5b611fa582611f6e565b9392505050565b60008060408385031215611fbf57600080fd5b611fc883611f6e565b9150611fd660208401611f6e565b90509250929050565b60008060408385031215611ff257600080fd5b611ffb83611f6e565b946020939093013593505050565b60006020828403121561201b57600080fd5b5035919050565b60ff80825116835260208083015181850160005b6004811015612055578251851682529183019190830190600101612036565b505050508060408301511660a0840152505050565b60006102a08201905060ff8a16825260ff8916602083015260ff8816604083015260ff87166060830152856080830152845160a083015261ffff60208601511660c083015260ff60408601511660e083015260608501516101008301526120d5610120830185612022565b6120e36101e0830184612022565b9998505050505050505050565b6000806000806080858703121561210657600080fd5b61210f85611f6e565b9350602085013561ffff8116811461212657600080fd5b9250604085013560ff8116811461213c57600080fd5b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561072e5761072e61214c565b60008261219257634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff81036121c3576121c361214c565b60010192915050565b60ff818116838216019081111561072e5761072e61214c565b60ff81811683821602908116908181146122015761220161214c565b5092915050565b60ff828116828216039081111561072e5761072e61214c565b63ffffffff8181168382160190808211156122015761220161214c565b8181038181111561072e5761072e61214c56fea26469706673582212207cbd2efbbf0b1e0c7f4f78f060299b58bd4c0d1fa0cccfd464ee545fe38179e664736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063933698731161004e578063933698731461015e578063ef5cfb8c14610171578063f579f88214610191578063fbdd02d1146101c557600080fd5b80631a57cf231461008057806335f375e1146100955780636698a018146100c85780638bcdcbf3146100e8575b600080fd5b61009361008e366004611f8a565b6101e5565b005b3480156100a157600080fd5b506100b56100b0366004611fac565b6106cc565b6040519081526020015b60405180910390f35b3480156100d457600080fd5b506100936100e3366004611f8a565b610734565b3480156100f457600080fd5b50610136610103366004611f8a565b60006020819052908152604090208054600182015460029092015463ffffffff8083169364010000000090930416919084565b6040805163ffffffff95861681529490931660208501529183015260608201526080016100bf565b61009361016c366004611fdf565b611411565b34801561017d57600080fd5b5061009361018c366004611f8a565b611622565b34801561019d57600080fd5b506101b16101ac366004612009565b611911565b6040516100bf98979695949392919061206a565b3480156101d157600080fd5b506100936101e03660046120f0565b611a7b565b80600160006101f43384611dd1565b805490915060ff8381166301000000909204161461024a5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21030b1ba34b7b760911b60448201526064015b60405180910390fd5b805460ff166000036102a3576001600160a01b038316331061029e5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b6102eb565b6001600160a01b03831633116102eb5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b60006102f733866106cc565b6000818152600160205260409020600481015491925090431161035c5760405162461bcd60e51b815260206004820152600f60248201527f426c6f636b206e6f74206d696e656400000000000000000000000000000000006044820152606401610241565b600481015461036c9060fa612162565b43106103aa5760405162461bcd60e51b815260206004820152600d60248201526c109b1bd8dac81d1bdbc81bdb19609a1b6044820152606401610241565b806001015434146103fd5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642062657420616d6f756e7400000000000000000000000000006044820152606401610241565b348160010160008282546104119190612162565b90915550506002810154600482015460408051602080820194909452914082820152805180830382018152606090920190528051910120600882018054600360ff19918216811790925560058401805490911690911790556000805b60028160ff1610156104ea57610484836008611df4565b9093509150610494600f83612175565b61049f906001612162565b6006850160ff8316600481106104b7576104b7612197565b602091828204019190066101000a81548160ff021916908360ff16021790555080806104e2906121ad565b91505061046d565b5060005b60028160ff16101561056b57610505836008611df4565b9093509150610515600f83612175565b610520906001612162565b6009850160ff83166004811061053857610538612197565b602091828204019190066101000a81548160ff021916908360ff1602179055508080610563906121ad565b9150506104ee565b50610577826001611df4565b845460ff191660ff82169081178655919350915061059490611e1d565b82546105a69033908a9060ff16611e7e565b6105ba6001600160a01b0389163310611ef3565b825460ff166000036105fe57600883018054600191906000906105e190849060ff166121cc565b92506101000a81548160ff021916908360ff160217905550610632565b6005830180546001919060009061061990849060ff166121cc565b92506101000a81548160ff021916908360ff1602179055505b61063d826003611df4565b909250905061064d600482612175565b610658906001612162565b835460ff919091166101000261ff0019909116178355610679826003611df4565b9092509050610689600482612175565b610694906001612162565b83546000600486015563ffff000019166201000060ff929092169190910263ff00000019161763020000001790925550505050505050565b6000816001600160a01b0316836001600160a01b031611156106ec579091905b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b1660348201526048016040516020818303038152906040528051906020012090505b92915050565b80600260006107433384611dd1565b805490915060ff838116630100000090920416146107945760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21030b1ba34b7b760911b6044820152606401610241565b805460ff166000036107ed576001600160a01b03831633106107e85760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b610835565b6001600160a01b03831633116108355760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b600061084133866106cc565b600081815260016020526040902060048101549192509043116108a65760405162461bcd60e51b815260206004820152600f60248201527f426c6f636b206e6f74206d696e656400000000000000000000000000000000006044820152606401610241565b60048101546108b69060fa612162565b43106108f45760405162461bcd60e51b815260206004820152600d60248201526c109b1bd8dac81d1bdbc81bdb19609a1b6044820152606401610241565b805460009060ff161561090a578160080161090f565b816005015b825490915060009060ff1615610928578260050161092d565b826008015b60028301549091506001906064908216820361095f575060028301805460ff8082166001181660ff1990911617905560325b6002848101546001911c8116900361098a5760028401805460ff8082166004181660ff199091161790555b60028501546004860154604080516020808201949094529140828201528051808303820181526060909201905280519101206003860154600090600190811c81169003610a0257855460019087906000906109e990849060ff166121cc565b92506101000a81548160ff021916908360ff1602179055505b600387015460021c60019081169003610a2c57600393508263ffffffff16606403610a2c57603c92505b6003878101546001911c81169003610a555760028501805460ff19811660ff9091161760011790555b600387015460041c60019081169003610a7f57600293508263ffffffff16606403610a7f57605a92505b600387015460051c60019081169003610ac85786546002908890600190610aaf908490610100900460ff166121cc565b92506101000a81548160ff021916908360ff1602179055505b600387015460061c60019081169003610b1157865460029088908290610af890829062010000900460ff166121cc565b92506101000a81548160ff021916908360ff1602179055505b600387015460081c60019081169003610c80576000805b600460ff82161015610be857866001018160ff1660048110610b4c57610b4c612197565b602081049091015460ff601f9092166101000a90041615610bd657866001018160ff1660048110610b7f57610b7f612197565b602091828204019190069054906101000a900460ff1691506000876001018260ff1660048110610bb157610bb1612197565b602091828204019190066101000a81548160ff021916908360ff160217905550610be8565b80610be0816121ad565b915050610b28565b5060005b600460ff82161015610c7d57876001018160ff1660048110610c1057610c10612197565b602081049091015460ff601f9092166101000a900416600003610c6b5781886001018260ff1660048110610c4657610c46612197565b602091828204019190066101000a81548160ff021916908360ff160217905550610c7d565b80610c75816121ad565b915050610bec565b50505b600387015460091c60019081169003610cab576002868101805460ff19811660ff9091161790911790555b6003870154600a1c60019081169003610cd55760028501805460ff19811660ff9091161760041790555b6003870154600b1c60019081169003610d2c576002808701805460ff19811660ff9182161760081790915587548891600091610d13918591166121e5565b92506101000a81548160ff021916908360ff1602179055505b6003870154600c1c60019081169003610d715786546201000060ff6101008084048216830262ff000019938504909216029190911662ffff0019909216919091171787555b6003870154600d1c60019081169003610e0c57865463ff00000019166303000000178755610da0826001611df4565b90925090506001819003610dc557855460ff1990811660011787558554168555610dd8565b855460ff19908116875585541660011785555b600587015460ff1615610dec576000610def565b60015b875460ff191660ff91909116179096555061140b95505050505050565b6003870154600e1c60019081169003610eb75760005b600460ff82161015610eb5576000876001018260ff1660048110610e4857610e48612197565b602091828204019190066101000a81548160ff021916908360ff1602179055506000866001018260ff1660048110610e8257610e82612197565b602091828204019190066101000a81548160ff021916908360ff1602179055508080610ead906121ad565b915050610e22565b505b6003870154600f1c60019081169003610f285760005b600460ff82161015610f26576000866001018260ff1660048110610ef357610ef3612197565b602091828204019190066101000a81548160ff021916908360ff1602179055508080610f1e906121ad565b915050610ecd565b505b610f33826008611df4565b9092509050600063ffffffff8416610f4c606484612175565b10610f58576000610f5b565b60015b9050610f68836008611df4565b89549194509250600090610f8c9060ff6201000082048116916101009004166121cc565b895460ff918216925060009161010090910416610fa98386612175565b60038c01549111915060ff62010000909104811684181615811561117757801561108857885460ff808a1691161061100f57885488908a90600090610ff290849060ff16612208565b92506101000a81548160ff021916908360ff160217905550611054565b6002890154600190811c8116900361104b578854600160ff19918216178a556002808b01805492831660ff938416909218909216179055611054565b885460ff191689555b885460ff16600003611083575050885463ff00000019166303000000179098555061140b975050505050505050565b61113e565b895460ff808a169116106110ca57895488908b906000906110ad90849060ff16612208565b92506101000a81548160ff021916908360ff16021790555061110f565b60028a0154600190811c81169003611106578954600160ff19918216178b556002808c01805492831660ff93841690921890921617905561110f565b895460ff19168a555b895460ff1660000361113e575050885463ff00000019166303000000179098555061140b975050505050505050565b8a546001908c90829061115a908290610100900460ff16612208565b92506101000a81548160ff021916908360ff1602179055506111ae565b8a546001908c9060029061119590849062010000900460ff16612208565b92506101000a81548160ff021916908360ff1602179055505b811580156111c7575060038b015462010000900460ff16155b806111dc575060038b015460071c6001908116145b6111f5578a5460ff8082166001181660ff19909116178b555b600060048c01558a546112189060ff6201000082048116916101009004166121cc565b60ff1660000361129d5761122d866003611df4565b909650945061123d600486612175565b611248906001612162565b8b5460ff919091166101000261ff0019909116178b55611269866003611df4565b9096509450611279600486612175565b611284906001612162565b8b5460ff91909116620100000262ff000019909116178b555b6112a8866002611df4565b909650945060008590036113b95760005b60028160ff161015611336576112d0876008611df4565b90975095506112e0600f87612175565b6112eb906001612162565b8b6001018260ff166004811061130357611303612197565b602091828204019190066101000a81548160ff021916908360ff160217905550808061132e906121ad565b9150506112b9565b5060005b60028160ff1610156113b757611351876008611df4565b9097509550611361600f87612175565b61136c906001612162565b8a6001018260ff166004811061138457611384612197565b602091828204019190066101000a81548160ff021916908360ff16021790555080806113af906121ad565b91505061133a565b505b6040805133815282151560208201528315158183015290518d917fac868de1024d422dd43748aab4352d056b693c0e35c3a063246809eac59f3244919081900360600190a25050505050505050505050505b50505050565b600061141d33846106cc565b60008181526001602052604090208054919250906301000000900460ff161580611452575080546301000000900460ff166004145b80611482575080546301000000900460ff1660011480156114825750600481015461147f90610104612162565b43115b6114ce5760405162461bcd60e51b815260206004820152601360248201527f47616d6520616c726561647920657869737473000000000000000000000000006044820152606401610241565b6001600160a01b03841633106114e55760006114e8565b60015b815460408051608081018252868152600060208201819052818301524360609091018190526002850187905560038501805462ffffff191690556004850155346001850181905563ff0000ff1990921660ff9390931692909217630100000017835590516001600160a01b038616917f7287e97c456d8f252a58071175cf3af00dc7dbf999f313e51ab5f408bf6ec72b916115989133916001600160a01b03929092168252602082015260400190565b60405180910390a26040516001600160a01b038516815233907f4115b796b35d1bac2eb954bf8215a812e9d6c60b0765313323c1dc4af6aaaf449060200160405180910390a26040513381526001600160a01b038516907f4115b796b35d1bac2eb954bf8215a812e9d6c60b0765313323c1dc4af6aaaf449060200160405180910390a250505050565b80600360006116313384611dd1565b805490915060ff838116630100000090920416146116825760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21030b1ba34b7b760911b6044820152606401610241565b805460ff166000036116db576001600160a01b03831633106116d65760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b611723565b6001600160a01b03831633116117235760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b600061172f33866106cc565b6000818152600160208181526040808420338552918490528320805494955090939192909161176590849063ffffffff16612221565b92506101000a81548163ffffffff021916908363ffffffff1602179055506001600080886001600160a01b03166001600160a01b0316815260200190815260200160002060000160048282829054906101000a900463ffffffff166117ca9190612221565b92506101000a81548163ffffffff021916908363ffffffff1602179055508060010154600080336001600160a01b03166001600160a01b0316815260200190815260200160002060010160008282546118239190612162565b909155505060018101546001600160a01b03871660009081526020819052604081206002018054909190611858908490612162565b9091555050600181015460405160009133918381818185875af1925050503d80600081146118a2576040519150601f19603f3d011682016040523d82523d6000602084013e6118a7565b606091505b50509050806118f85760405162461bcd60e51b815260206004820152601060248201527f5472616e73666572206661696c65642e000000000000000000000000000000006044820152606401610241565b50805463ff000000191663040000001790555050505050565b60016020818152600092835260409283902080549281015484516080808201875260028401548252600384015461ffff811683870152620100009081900460ff908116848a01526004808701546060808701919091528a519081018b52600588018054841682528b51958601909b52828a169a6101008b0484169a94850484169963010000009095049093169794909384019160068601908282826020028201916000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116119b6575050509284525050506002919091015460ff9081166020928301526040805160608101825260088601805490931681528151608081019283905294959490938401916009860190600490826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411611a31575050509284525050506002919091015460ff16602090910152905088565b8360026000611a8a3384611dd1565b805490915060ff83811663010000009092041614611adb5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21030b1ba34b7b760911b6044820152606401610241565b805460ff16600003611b34576001600160a01b0383163310611b2f5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b611b7c565b6001600160a01b0383163311611b7c5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610241565b6000611b883389611dd1565b805490915060009060ff1615611ba15781600801611ba6565b816005015b905060015b600f60ff821611611cc857600161ffff8a1660ff83161c81169003611cb6576000805b600460ff82161015611c66578260ff16846001018260ff1660048110611bf657611bf6612197565b602081049091015460ff601f9092166101000a90041603611c5457600191506000846001018260ff1660048110611c2f57611c2f612197565b602091828204019190066101000a81548160ff021916908360ff160217905550611c66565b80611c5e816121ad565b915050611bce565b5080611cb45760405162461bcd60e51b815260206004820152600d60248201527f496e76616c6964206974656d73000000000000000000000000000000000000006044820152606401610241565b505b80611cc0816121ad565b915050611bab565b506002818101546001911c81169003611d2d5761ffff881615611d2d5760405162461bcd60e51b815260206004820152601960248201527f4974656d73206c6f636b656420696e2074686973207475726e000000000000006044820152606401610241565b600281015460031c60019081169003611d925761ffff881615611d925760405162461bcd60e51b815260206004820152601960248201527f4974656d73206c6f636b656420696e2074686973207475726e000000000000006044820152606401610241565b5060038101805443600484015560029092019590955560ff909516620100000262ffffff1990951661ffff909616959095179390931790915550505050565b600080611dde84846106cc565b6000908152600160205260409020949350505050565b60008080611e09600160ff861681901b61223e565b60ff9490941685901c959390941693505050565b611e7b81604051602401611e3391815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167ff82c50f100000000000000000000000000000000000000000000000000000000179052611f49565b50565b6040516001600160a01b0380851660248301528316604482015260648101829052611eee9060840160408051601f198184030181529190526020810180516001600160e01b03167f17fe618500000000000000000000000000000000000000000000000000000000179052611f49565b505050565b6040518115156024820152611e7b9060440160408051601f198184030181529190526020810180516001600160e01b03167f32458eed000000000000000000000000000000000000000000000000000000001790525b611e7b8160006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b80356001600160a01b0381168114611f8557600080fd5b919050565b600060208284031215611f9c57600080fd5b611fa582611f6e565b9392505050565b60008060408385031215611fbf57600080fd5b611fc883611f6e565b9150611fd660208401611f6e565b90509250929050565b60008060408385031215611ff257600080fd5b611ffb83611f6e565b946020939093013593505050565b60006020828403121561201b57600080fd5b5035919050565b60ff80825116835260208083015181850160005b6004811015612055578251851682529183019190830190600101612036565b505050508060408301511660a0840152505050565b60006102a08201905060ff8a16825260ff8916602083015260ff8816604083015260ff87166060830152856080830152845160a083015261ffff60208601511660c083015260ff60408601511660e083015260608501516101008301526120d5610120830185612022565b6120e36101e0830184612022565b9998505050505050505050565b6000806000806080858703121561210657600080fd5b61210f85611f6e565b9350602085013561ffff8116811461212657600080fd5b9250604085013560ff8116811461213c57600080fd5b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561072e5761072e61214c565b60008261219257634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff81036121c3576121c361214c565b60010192915050565b60ff818116838216019081111561072e5761072e61214c565b60ff81811683821602908116908181146122015761220161214c565b5092915050565b60ff828116828216039081111561072e5761072e61214c565b63ffffffff8181168382160190808211156122015761220161214c565b8181038181111561072e5761072e61214c56fea26469706673582212207cbd2efbbf0b1e0c7f4f78f060299b58bd4c0d1fa0cccfd464ee545fe38179e664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 46,
        "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
        "label": "stats",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Stats)41_storage)"
      },
      {
        "astId": 89,
        "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
        "label": "games",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(GameState)84_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint8)4_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[4]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Stats)41_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RevolutionRoulette.Stats)",
        "numberOfBytes": "32",
        "value": "t_struct(Stats)41_storage"
      },
      "t_mapping(t_bytes32,t_struct(GameState)84_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RevolutionRoulette.GameState)",
        "numberOfBytes": "32",
        "value": "t_struct(GameState)84_storage"
      },
      "t_struct(GameState)84_storage": {
        "encoding": "inplace",
        "label": "struct RevolutionRoulette.GameState",
        "members": [
          {
            "astId": 66,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "turn",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 68,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "liveRounds",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 70,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "blankRounds",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 72,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "status",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 74,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "betAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 77,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "commitedRandHash",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(RngCommit)55_storage"
          },
          {
            "astId": 80,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "player1",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(Player)64_storage"
          },
          {
            "astId": 83,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "player2",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(Player)64_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Player)64_storage": {
        "encoding": "inplace",
        "label": "struct RevolutionRoulette.Player",
        "members": [
          {
            "astId": 57,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "health",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 61,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "items",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint8)4_storage"
          },
          {
            "astId": 63,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "effects",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RngCommit)55_storage": {
        "encoding": "inplace",
        "label": "struct RevolutionRoulette.RngCommit",
        "members": [
          {
            "astId": 48,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "randNum",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 50,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "itemsToUse",
            "offset": 0,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 52,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "target",
            "offset": 2,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 54,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "block",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Stats)41_storage": {
        "encoding": "inplace",
        "label": "struct RevolutionRoulette.Stats",
        "members": [
          {
            "astId": 34,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "wins",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 36,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "losses",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 38,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "moneyWon",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 40,
            "contract": "contracts/RevolutionRoulette.sol:RevolutionRoulette",
            "label": "moneyLost",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}